#include <iostream>
using namespace std;

class SNode {
public:
    int data;
    SNode* next;
    SNode(int val) : data(val), next(nullptr) {}
};

class DNode {
public:
    int data;
    DNode* prev;
    DNode* next;
    DNode(int val) : data(val), prev(nullptr), next(nullptr) {}
};

DNode* toDoubly(SNode* head) {
    if (!head) return nullptr;
    DNode* dHead = new DNode(head->data);
    DNode* dTail = dHead;
    head = head->next;
    while (head) {
        DNode* node = new DNode(head->data);
        dTail->next = node;
        node->prev = dTail;
        dTail = node;
        head = head->next;
    }
    return dHead;
}

void toCircular(SNode* head) {
    if (!head) return;
    SNode* temp = head;
    while (temp->next) temp = temp->next;
    temp->next = head;
}

SNode* makeSingly(int* arr, int n) {
    if (n <= 0) return nullptr;
    SNode* head = new SNode(arr[0]);
    SNode* tail = head;
    for (int i = 1; i < n; i++) {
        tail->next = new SNode(arr[i]);
        tail = tail->next;
    }
    return head;
}

void printSingly(SNode* head) {
    while (head) {
        cout << head->data << " -> ";
        head = head->next;
    }
    cout << "NULL" << endl;
}

void printDoubly(DNode* head) {
    DNode* tail = nullptr;
    while (head) {
        cout << head->data << " <-> ";
        if (!head->next) tail = head;
        head = head->next;
    }
    cout << "NULL" << endl;
    while (tail) {
        cout << tail->data << " <-> ";
        tail = tail->prev;
    }
    cout << "NULL" << endl;
}

void printCircular(SNode* head, int count) {
    if (!head) return;
    SNode* temp = head;
    for (int i = 0; i < count; i++) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "..." << endl;
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;
    int* arr = new int[n];
    for (int i = 0; i < n; i++) {
        cout << "Enter element " << i + 1 << ": ";
        cin >> arr[i];
    }
    SNode* sHead = makeSingly(arr, n);
    cout << "\nSingly: ";
    printSingly(sHead);
    DNode* dHead = toDoubly(sHead);
    cout << "\nDoubly:\n";
    printDoubly(dHead);
    toCircular(sHead);
    cout << "\nCircular:\n";
    printCircular(sHead, 2 * n);
    delete[] arr;
    return 0;
}

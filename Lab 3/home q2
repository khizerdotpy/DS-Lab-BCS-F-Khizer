#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
};

class LinkedList {
private:
    Node* head;
    Node* tail;

public:
    LinkedList() {
        head = nullptr;
        tail = nullptr;
    }

    void createList(int* a, int n) {
        Node* temp = nullptr;
        temp = new Node;
        temp->data = a[0];
        temp->next = nullptr;
        if (head == nullptr) {
            head = temp;
        }
        tail = head;
        for (int i = 1; i < n; i++) {
            temp = new Node;
            temp->data = a[i];
            temp->next = nullptr;
            tail->next = temp;
            tail = temp;
        }
    }

    void display() {
        Node* p = head;
        while (p != nullptr) {
            cout << p->data << " -> ";
            p = p->next;
        }
        cout << "NULL" << endl;
    }

    static LinkedList mergeLists(LinkedList& l1, LinkedList& l2) {
        LinkedList result;
        Node* p = l1.head;
        Node* q = l2.head;

        Node temp;
        Node* tail = &temp;
        temp.next = nullptr;

        while (p && q) {
            if (p->data <= q->data) {
                tail->next = p;
                p = p->next;
            } else {
                tail->next = q;
                q = q->next;
            }
            tail = tail->next;
        }

        if (p) tail->next = p;
        if (q) tail->next = q;

        result.head = temp.next;
        Node* t = result.head;
        while (t && t->next) t = t->next;
        result.tail = t;

        return result;
    }
};

int main() {
    LinkedList list1, list2;

    int arr1[] = {1, 3, 5};
    int arr2[] = {2, 4, 6};

    list1.createList(arr1, 3);
    list2.createList(arr2, 3);

    cout << "List A: ";
    list1.display();

    cout << "List B: ";
    list2.display();

    LinkedList merged = LinkedList::mergeLists(list1, list2);

    cout << "Merged List: ";
    merged.display();

    return 0;
}

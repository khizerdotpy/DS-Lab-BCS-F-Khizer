#include <iostream>
using namespace std;

void insertionSort(int* arr, int n) {
    for (int i = 1; i < n; i++) {
        int target = arr[i];
        int j = i - 1;

        while (j >= 0 && arr[j] > target) {
            arr[j + 1] = arr[j];
            j--;
        }

        arr[j + 1] = target;
    }
}

int binarySearch(int* a,int s,int rnum){

    int left=0;
    int right=s-1;
    bool isFound=false;
    int mid=-1;

    while(left<=right){
         mid=left+(right-left)/2;
        if((a[mid])==rnum){
            cout<<"found at position: "<<mid<<" . "<<endl;
            isFound=true;
            return 1;
        } else if(a[mid]<rnum){
            left=mid+1;
        } else {
            right=mid-1;
        }
        
    }
    return -1;

}

int main(){

    int r;
    int* arr;
    cout<<"Enter number of array elements: ";
    cin>>r;

    arr = new int[r];

    for (int i=0;i<r;i++){
        cout<<"Enter element number "<<i+1<<" : ";
        cin>>arr[i];
    }

    cout<<"Unsorted Array: "<<endl;
    for(int c=0;c<r;c++){
        cout<<arr[c];
    }

    insertionSort(arr,r);

    cout<<"\nSorted Array: "<<endl;
    for(int c=0;c<r;c++){
        cout<<arr[c];
    }


    int target;
    cout << "Enter value to search: ";
    cin >> target;

    int found = binarySearch(arr, r, target);

    if (found != -1){
        cout << "Target found at index: " << found << endl;
    } else {
        cout << "Target not found in the array." << endl;
    }
    delete[] arr;
    
    return 0;
}

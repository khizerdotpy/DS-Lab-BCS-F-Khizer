#include <iostream>
using namespace std;

#define MAX 20
void printSolution(int board[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << (board[i][j] ? "Q " : ". ");
        }
        cout << endl;
    }
    cout << endl;
}
bool isSafe(int board[MAX][MAX], int row, int col, int n) {
    for (int i = 0; i < row; i++) {
        if (board[i][col]) return false;
    }
    for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) return false;
    }
    for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
        if (board[i][j]) return false;
    }

    return true;
}
void solveNQueens(int board[MAX][MAX], int row, int n, int& solutionCount) {
    if (row == n) {
        solutionCount++;
        cout << "Solutions " << solutionCount << ":\n";
        printSolution(board, n);
        return;
    }
    for (int col = 0; col < n; col++) {
        if (isSafe(board, row, col, n)) {
            board[row][col] = 1;
            solveNQueens(board, row + 1, n, solutionCount);
            board[row][col] = 0;
        }
    }
}

int main() {
    int n;
    cout << "Enter value of N (<= " << MAX << "): ";
    cin >> n;

    if (n > MAX || n < 1) {
        cout << "Invalid board size!" << endl;
        return 0;
    }

    int board[MAX][MAX] = {0};
    int solutionCount = 0;
    solveNQueens(board, 0, n, solutionCount);
    if (solutionCount == 0) {
        cout << "No solution exists for N = " << n << endl;
    } else {
        cout << "Total solutions: " << solutionCount << endl;
    }

    return 0;
}
